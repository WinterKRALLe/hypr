;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;          WINDOWS          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;         POWERMENU         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defwindow powermenu0
  :monitor 0
  :stacking "bg"
  :windowtype "normal"
  :geometry (geometry :width "100%" :height "100%")
  (powermenu_layout))

(defwindow powermenu1
  :monitor 1
  :stacking "bg"
  :windowtype "normal"
  :geometry (geometry :width "100%" :height "100%")
  (powermenu_layout))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;            BAR            ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defwindow bar0
  :monitor 0
  :stacking "fg"
  :exclusive true
  :geometry (geometry :width "100%" :height 32 :anchor "top center")
  (bar_layout))

(defwindow bar1
  :monitor 0
  :stacking "fg"
  :exclusive true
  :geometry (geometry :width "100%" :height 32 :anchor "top center")
  (bar_layout))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;          LAYOUTS          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;         POWERMENU         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defwidget powermenu_layout []
  (box :class "layout-box" :orientation "vertical"
    
    (box :valign "start" :space-evenly false :spacing 25
      (sys)
      (_battery :status {EWW_BATTERY.BAT1.status} :capacity {EWW_BATTERY.BAT1.capacity})
      (_network :strength net)
      (label :text "|" :class "sep")
      (_sundial)
    )
    
    (box :space-evenly false :hexpand true :vexpand true
      (box :spacing 15 :class "tm-box" :space-evenly false
        :valign "end" :halign "start"
        (label :text "󰸘")
        (label :text "${time.hour} : ${time.min}"))
      
      (_buttons :shutdown "shutdown now" :reboot "reboot"
        :logout "betterlockscreen --suspend"
        :shutdown_icon "󰐥" :reboot_icon "󰑙"
      :logout_icon "󰤄")
      
    )
  )
)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;            BAR            ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defwidget bar_layout []
  (box :class "bar_layout" :orientation "horizontal"
    (box :valign "start" :space-evenly false :spacing 20
      (label :text "${time.hour}:${time.min}")
      (sys :orientation "horizontal")
    )
    (box :valign "start" :halign "center" :space-evenly false
      (_workspaces)
    )
    (box :valign "start" :halign "end" :space-evenly true
      (_network :strength net)
      (_battery :status {EWW_BATTERY.BAT1.status} :capacity {EWW_BATTERY.BAT1.capacity})
      (audio)
    )
  )
)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;          WIDGETS          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;           AUDIO           ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defpoll volume :interval "0.1s" `pamixer --get-volume` )
(defpoll muted :interval "0.1s" `pamixer --get-mute` )

(defwidget audio []
  (box :class "module" :space-evenly "true" :orientation "h" :spacing 3
    (button :onrightclick "pavucontrol" :onclick "pamixer -t"
      (box
        (image :path {muted == true ? "icons/speaker-x.svg" :
          volume == 0 ? "icons/speaker-none.svg" :
          volume < 51 ? "icons/speaker-low.svg" :
          "icons/speaker-high.svg"
          }
        :image-width 40 :image-height 26)
        (label :text {muted == true ? "Muted" : volume})
      )
    )
  )
)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;            TIME           ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defpoll time :interval "5s"
  :initial `date +'{"hour":"%H","min":"%M"}'`
`date +'{"hour":"%H","min":"%M"}'`)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;          NETWORK          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defpoll net :interval "60s"
  :initial `N/A`
  `nmcli -t -f SIGNAL,ACTIVE device wifi \
  | awk -F':' '{if($2=="yes")print$1}'`)

(defwidget _network [strength]
  (box :class "net-box" :halign "end"
    (image :path {strength == "" ? "icons/wifi-off.svg" :
      strength < 26 ? "icons/wifi-1.svg" :
      strength < 51 ? "icons/wifi-2.svg" :
      strength < 76 ? "icons/wifi-3.svg" :
      "icons/wifi-4.svg"}
      :image-width 40 :image-height 28
    )
  )
)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;          BATTERY          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defwidget _battery [status capacity]
  (box :spacing 3 :hexpand true :halign "end"
    (image :class "battery-icon"
      :path {status == "Charging" ? "icons/battery-charging-fill.svg" :
      capacity < 10 ? "icons/battery-empt-fill.svg" :
      capacity < 35 ? "icons/battery-low-fill.svg" :
      capacity < 60 ? "icons/battery-medium-fill.svg" :
      capacity < 94 ? "icons/battery-high-fill.svg" :
      "icons/battery-full-fill.svg"
      }
    :image-width 40 :image-height 28)
    (label :class "battery-label" :text "${capacity}%")
  )
)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;         WORKSPACES        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defpoll currentWS :interval "1s" `hyprctl -j monitors | jq -r '.[0] | \(.activeWorkspace.id)'`)
; activeWS `hyprctl -j workspaces | jq -r '.[] | \(.id)'` -> ALL USED WORKSPACES BUT I DONT KNOW HOW TO IMPLEMENT IT
; IF YOU RE USIGN WS 1 2 5, IT WILL SHOW 1 2 5, BUT DONT KNOW HOW TO STORE IT
(defvar my-workspaces "[1, 2, 3, 4, 5, 6, 7]")
(defwidget _workspaces []
  (eventbox :cursor "pointer"
    (box :class "module" :space-evenly "false" :orientation "h" :spacing 20
      (for ws in my-workspaces
        (button :onclick "hyprctl dispatch workspace ${ws}"
          (image :path {
            ws == currentWS ? "icons/circle-fill.svg" :
            "icons/circle.svg"
          } :image-width 26 :image-height 26))
      )
    )
  )
)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;      CPU & RAM USAGE      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defwidget sys[]
  (box :class "cpu" :orientation "h" :space-evenly false :halign "center" :valign "center" :spacing 20
    (box
      (image :path "icons/cpu.svg" :image-width 40 :image-height 28)
      (label :text  "${round(EWW_CPU.avg, 0)}%" )
    )
    (box
      (image :path "icons/memory.svg" :image-width 40 :image-height 28)
      (label :text "${round(EWW_RAM.used_mem_perc, 0)}%")
    )
  )
)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;       POWER BUTTONS       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defwidget _buttons [shutdown shutdown_icon reboot
  reboot_icon logout logout_icon]
  (box :class "btns-box" :spacing 45
    :vexpand false :hexpand true
    :valign "end" :halign "end"
    
    (button :onclick shutdown shutdown_icon)
    (button :onclick reboot reboot_icon)
    (button :onclick logout logout_icon)
  )
)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;          SUNDIAL          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defwidget _sundial []
  (label :class "sundial-lbl"
    :text {time.hour >= 2 && time.hour <= 4 ? "Early Morning" :
    time.hour <= 5 ? "Dawn" :
    time.hour >= 6 && (time.hour <= 8 && time.min <= 59) ? "Morning" :
    time.hour >= 9 && (time.hour <= 11 && time.min <= 59) ? "Late Morning" :
    time.hour == 12 && time.min <= 29 ? "Midday" :
    time.hour >= 12 && time.hour <= 16 ? "Afternoon" :
    time.hour > 16 && time.hour <= 17 ? "Late Afternoon" :
    (time.hour >= 17 && time.min <= 1) || (time.hour <= 18 && time.min <= 20) ? "Early Evening" :
    time.hour >= 18 && time.hour <= 19 ? "Dusk" :
    time.hour > 19 && time.hour <= 21 ? "Late Evening" :
    time.hour > 21 ? "Night" :
    "Midnight"}
  )
)
